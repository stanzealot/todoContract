/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TodoContract {
  export type TaskStruct = {
    id: BigNumberish;
    title: string;
    description: string;
    completed: boolean;
    createdAt: BigNumberish;
    owner: AddressLike;
  };

  export type TaskStructOutput = [
    id: bigint,
    title: string,
    description: string,
    completed: boolean,
    createdAt: bigint,
    owner: string
  ] & {
    id: bigint;
    title: string;
    description: string;
    completed: boolean;
    createdAt: bigint;
    owner: string;
  };
}

export interface TodoContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "completeTask"
      | "createTask"
      | "deleteTask"
      | "getTask"
      | "getTotalTasks"
      | "getUserTaskCount"
      | "getUserTasks"
      | "nextTaskId"
      | "tasks"
      | "updateTask"
      | "userTasks"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "TaskCompleted"
      | "TaskCreated"
      | "TaskDeleted"
      | "TaskUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "completeTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTask",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTasks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTaskCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTasks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextTaskId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tasks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "updateTask",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userTasks",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "completeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTasks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTaskCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTasks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextTaskId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tasks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userTasks", data: BytesLike): Result;
}

export namespace TaskCompletedEvent {
  export type InputTuple = [taskId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [taskId: bigint, owner: string];
  export interface OutputObject {
    taskId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskCreatedEvent {
  export type InputTuple = [
    taskId: BigNumberish,
    owner: AddressLike,
    title: string,
    description: string,
    createdAt: BigNumberish
  ];
  export type OutputTuple = [
    taskId: bigint,
    owner: string,
    title: string,
    description: string,
    createdAt: bigint
  ];
  export interface OutputObject {
    taskId: bigint;
    owner: string;
    title: string;
    description: string;
    createdAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskDeletedEvent {
  export type InputTuple = [taskId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [taskId: bigint, owner: string];
  export interface OutputObject {
    taskId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskUpdatedEvent {
  export type InputTuple = [
    taskId: BigNumberish,
    owner: AddressLike,
    title: string,
    description: string
  ];
  export type OutputTuple = [
    taskId: bigint,
    owner: string,
    title: string,
    description: string
  ];
  export interface OutputObject {
    taskId: bigint;
    owner: string;
    title: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TodoContract extends BaseContract {
  connect(runner?: ContractRunner | null): TodoContract;
  waitForDeployment(): Promise<this>;

  interface: TodoContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  completeTask: TypedContractMethod<
    [_taskId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createTask: TypedContractMethod<
    [_title: string, _description: string],
    [void],
    "nonpayable"
  >;

  deleteTask: TypedContractMethod<
    [_taskId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getTask: TypedContractMethod<
    [_taskId: BigNumberish],
    [TodoContract.TaskStructOutput],
    "view"
  >;

  getTotalTasks: TypedContractMethod<[], [bigint], "view">;

  getUserTaskCount: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  getUserTasks: TypedContractMethod<
    [_user: AddressLike],
    [TodoContract.TaskStructOutput[]],
    "view"
  >;

  nextTaskId: TypedContractMethod<[], [bigint], "view">;

  tasks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, boolean, bigint, string] & {
        id: bigint;
        title: string;
        description: string;
        completed: boolean;
        createdAt: bigint;
        owner: string;
      }
    ],
    "view"
  >;

  updateTask: TypedContractMethod<
    [_taskId: BigNumberish, _title: string, _description: string],
    [void],
    "nonpayable"
  >;

  userTasks: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "completeTask"
  ): TypedContractMethod<[_taskId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createTask"
  ): TypedContractMethod<
    [_title: string, _description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteTask"
  ): TypedContractMethod<[_taskId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getTask"
  ): TypedContractMethod<
    [_taskId: BigNumberish],
    [TodoContract.TaskStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalTasks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTaskCount"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTasks"
  ): TypedContractMethod<
    [_user: AddressLike],
    [TodoContract.TaskStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextTaskId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tasks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, boolean, bigint, string] & {
        id: bigint;
        title: string;
        description: string;
        completed: boolean;
        createdAt: bigint;
        owner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateTask"
  ): TypedContractMethod<
    [_taskId: BigNumberish, _title: string, _description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userTasks"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "TaskCompleted"
  ): TypedContractEvent<
    TaskCompletedEvent.InputTuple,
    TaskCompletedEvent.OutputTuple,
    TaskCompletedEvent.OutputObject
  >;
  getEvent(
    key: "TaskCreated"
  ): TypedContractEvent<
    TaskCreatedEvent.InputTuple,
    TaskCreatedEvent.OutputTuple,
    TaskCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TaskDeleted"
  ): TypedContractEvent<
    TaskDeletedEvent.InputTuple,
    TaskDeletedEvent.OutputTuple,
    TaskDeletedEvent.OutputObject
  >;
  getEvent(
    key: "TaskUpdated"
  ): TypedContractEvent<
    TaskUpdatedEvent.InputTuple,
    TaskUpdatedEvent.OutputTuple,
    TaskUpdatedEvent.OutputObject
  >;

  filters: {
    "TaskCompleted(uint256,address)": TypedContractEvent<
      TaskCompletedEvent.InputTuple,
      TaskCompletedEvent.OutputTuple,
      TaskCompletedEvent.OutputObject
    >;
    TaskCompleted: TypedContractEvent<
      TaskCompletedEvent.InputTuple,
      TaskCompletedEvent.OutputTuple,
      TaskCompletedEvent.OutputObject
    >;

    "TaskCreated(uint256,address,string,string,uint256)": TypedContractEvent<
      TaskCreatedEvent.InputTuple,
      TaskCreatedEvent.OutputTuple,
      TaskCreatedEvent.OutputObject
    >;
    TaskCreated: TypedContractEvent<
      TaskCreatedEvent.InputTuple,
      TaskCreatedEvent.OutputTuple,
      TaskCreatedEvent.OutputObject
    >;

    "TaskDeleted(uint256,address)": TypedContractEvent<
      TaskDeletedEvent.InputTuple,
      TaskDeletedEvent.OutputTuple,
      TaskDeletedEvent.OutputObject
    >;
    TaskDeleted: TypedContractEvent<
      TaskDeletedEvent.InputTuple,
      TaskDeletedEvent.OutputTuple,
      TaskDeletedEvent.OutputObject
    >;

    "TaskUpdated(uint256,address,string,string)": TypedContractEvent<
      TaskUpdatedEvent.InputTuple,
      TaskUpdatedEvent.OutputTuple,
      TaskUpdatedEvent.OutputObject
    >;
    TaskUpdated: TypedContractEvent<
      TaskUpdatedEvent.InputTuple,
      TaskUpdatedEvent.OutputTuple,
      TaskUpdatedEvent.OutputObject
    >;
  };
}
